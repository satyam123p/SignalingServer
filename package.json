[Chirag Goel] 04-29-2025 11:45
{
  "statusCode": 200,
  "body": {
    "Item": {
      "playingInformation": {
        "M": {}
      },
      "screenId": {
        "S": "b7-9c-3d-8a-c1-86"
      },
      "enrollment": {
        "M": {
          "errorCode": {
            "N": "500"
          },
          "log": {
            "L": [
              {
                "M": {
                  "message": {
                    "S": "Success to get screen Serial Number"
                  },
                  "createdTime": {
                    "N": "1705409257031"
                  }
                }
              },
              {
                "M": {
                  "message": {
                    "S": "Fail to get TBM Server Auth."
                  },
                  "createdTime": {
                    "N": "1705409258075"
                  }
                }
              },
              {
                "M": {
                  "message": {
                    "S": "Success to get screen Serial Number"
                  },
                  "createdTime": {
                    "N": "1705409432530"
                  }
                }
              },
              {
                "M": {
                  "message": {
                    "S": "Fail to get TBM Server Auth."
                  },
                  "createdTime": {
                    "N": "1705409433611"
                  }
                }
              },
              {
                "M": {
                  "message": {
                    "S": "Success to get screen Serial Number"
                  },
                  "createdTime": {
                    "N": "1705409564208"
                  }
                }
              },
              {
                "M": {
                  "message": {
                    "S": "Fail to get TBM Server Auth."
                  },
                  "createdTime": {
                    "N": "1705409565252"
                  }
                }
              },
              {
                "M": {
                  "message": {
                    "S": "Success to get screen Serial Number"
                  },
                  "createdTime": {
                    "N": "1705410840215"
                  }
                }
              },
              {
                "M": {
                  "message": {
                    "S": "Fail to get TBM Server Auth."
                  },
                  "createdTime": {
                    "N": "1705410841215"
                  }
                }
              },
              {
                "M": {
                  "message": {
                    "S": "Success to get screen Serial Number"
                  },
                  "createdTime": {
                    "N": "1705410942219"
                  }
                }
              },
              {
                "M": {
                  "message": {
                    "S": "Fail to get TBM Server Auth."
                  },
                  "createdTime": {
                    "N": "1705410943285"
                  }
                }
              },
              {
                "M": {
                  "message": {
                    "S": "Success to get screen Serial Number"
                  },
                  "createdTim

[Chirag Goel] 04-29-2025 15:49
{
  "statusCode": 500,
  "body": "DynamoDB batch_get failed: Parameter validation failed:\nInvalid type for parameter RequestItems.fcms-screens-dm, value: [{'screenId': {'S': 'b7-9c-3d-8a-c1-86'}}], type: <class 'list'>, valid types: <class 'dict'>"
}                                                                                                                                                                                                      import boto3
from controller.dynamoDBservice import DynamoDBService

def lambda_handler(event, context):
    service = DynamoDBService.get_instance(region=boto3.Session().region_name)
    action = event.get('action')
    params = event.get('params', {})
    try:
        if action == 'get':
            params['TableName'] = 'fcms-screens-dm'
            params['Key'] = {'screenId': 'b7-9c-3d-8a-c1-86'}
            result = service.get(params)
            print(result)
        elif action == 'update':
            params['TableName'] = 'fcms-screens-dm'
            params['Key'] = {'screenId': 'b7-9c-3d-8a-c1-86'}
            params['UpdateExpression'] = 'SET playingInformation = :pi'
            params['ExpressionAttributeValues'] = {':pi': {'M': {'status': 'active'}}}
            result = service.update(params)
            print(result)
        elif action == 'put':
            params['TableName'] = 'fcms-screens-dm'
            params['Item'] = {
                'screenId': {'S': 'b5-9f-3z-8a-c3-87'},
                'playingInformation': {'M': {'status': 'active'}},
            }
            result = service.put(params)
            print(result)
        elif action == 'batch_get':
            params['RequestItems'] = {
                'fcms-screens-dm': [
                    {'screenId': 'b7-9c-3d-8a-c1-86'},
                ]
            }
            result = service.batch_get(params)
            print(result)
        elif action == 'query':
            params = {
                'TableName': 'fcms-screens-dm',
                'KeyConditionExpression': 'screenId = :v1',
                'ExpressionAttributeValues': {':v1': {'S': 'b7-9c-3d-8a-c1-86'}},
                'ProjectionExpression': 'screenId, playingInformation'
            }
            result = service.query(params)
            print(result)
        elif action == 'batch_write':
            params = {
                'RequestItems': {
                    'fcms-screens-dm': [
                        {'PutRequest': {'Item': {'screenId': 'example1', 'data': 'value1'}}},
                        {'DeleteRequest': {'Key': {'screenId': 'example2'}}}
                    ]
                }
            }
            result = service.batch_write(params)   
            print(result) 
        elif action == 'scan':
            params = {
                'TableName': 'fcms-screens-dm',
                'FilterExpression': 'status = :active',
                'ExpressionAttributeValues': {':active': {'S': 'active'}}
            }
            result = service.scan(params)
            print(result)  
        elif action == 'transact_write':
            params = {
                'TransactItems': [
                    {
                        'Put': {
                            'TableName': 'fcms-screens-dm',
                            'Item': {'screenId': 'example3', 'data': 'value3'}
                        }
                    },
                    {
                        'Delete': {
                            'TableName': 'fcms-screens-dm',
                            'Key': {'screenId': 'example4'}
                        }
                    }
                ]
            }
            result = service.transact_write_items(params)
            print(result)  
        elif action == 'delete':
            params['TableName'] = 'fcms-screens-dm'
            params['Key'] = {'screenId': 'b7-9c-3d-8a-c1-86'}
            result = service.delete(params)
            print(result)
    except Exception as e:
        return {
            'statusCode': 500,
            'body': str(e)
        }    i want you to give me updated lambda handler that should be working
