const AWSXRay = require('aws-xray-sdk');
AWSXRay.setStreamingThreshold(0);
const AWS = (process.env.NODE_ENV == 'k8s') ? require('aws-sdk') : AWSXRay.captureAWS(require('aws-sdk'));

let instance;

class DynamoDBService {
    static getInstance = (params) => {
        if (!instance) {
            instance = new DynamoDBService(params);
        }
        return instance;
    };

    constructor(region = 'ap-northeast-1') {
        if (region == 'k8s') {
            AWS.config.update({ region: region, endpoint: 'http://dynamodb:8000' });
        } else {
            AWS.config.update({ region: region });
        }
        this.documentClient = new AWS.DynamoDB.DocumentClient();
    }

    update = async (params) => {
        return await this.documentClient.update(params).promise();
    };

    get = async (params) => {
        return await this.documentClient.get(params).promise();
    };

    delete = async (params) => {
        return await this.documentClient.delete(params).promise();
    };

    put = async (params) => {
        return await this.documentClient.put(params).promise();
    };

    batchGet = async (params) => {
        return await this.documentClient.batchGet(params).promise();
    };

    query = async (params) => {
        return await this.documentClient.query(params).promise();
    };

    batchWrite = async (params) => {
        return await this.documentClient.batchWrite(params).promise();
    };

    scan = async (params) => {
        return await this.documentClient.scan(params).promise();
    };

    transactWriteItems = async (params) => {
        return await this.documentClient.transactWrite(params).promise();
    };
}

module.exports = DynamoDBService;
