
from http import HTTPStatus
from response_service import ResponseService

def lambda_handler(event, context):
    try:
        response_service = ResponseService(event=event, context=context, is_ecs=False)
        action = event.get('action', '').lower()

        if action == 'create_no_content_http_response':
            return response_service.create_no_content_http_response({})

        elif action == 'create_accepted_http_response':
            return response_service.create_accepted_http_response({})

        elif action == 'create_ok_http_response':
            return response_service.create_ok_http_response({})

        elif action == 'create_created_http_response':
            return response_service.create_created_http_response('12345', '/resources/12345')

        elif action == 'create_error_http_response':
            error = Exception('Test error')
            error.name = 'TEST_ERROR'
            return response_service.create_error_http_response(HTTPStatus.INTERNAL_SERVER_ERROR, error, {})

        else:
            return response_service.create_error_http_response(
                HTTPStatus.BAD_REQUEST,
                Exception('Invalid action'),
                {'error': 'Valid actions: create_no_content_http_response, create_accepted_http_response, create_ok_http_response, create_created_http_response, create_error_http_response'}
            )

    except Exception as e:
        response_service = ResponseService(event=event, context=context, is_ecs=False)
        return response_service.create_error_http_response(HTTPStatus.INTERNAL_SERVER_ERROR, e, {'error': str(e)})





class ResponseCodes:
    OK = {"CODE": "OK", "MESSAGE": "Success"}
    UNKNOWN = {"CODE": "UNKNOWN", "MESSAGE": "Unknown error"}
    INVALID_PARAMETER_VALUE = {"CODE": "INVALID_PARAMETER_VALUE", "MESSAGE": "Invalid parameter value"}
    NOT_FOUND = {"CODE": "NOT_FOUND", "MESSAGE": "Resource not found"}
    BAD_REQUEST = {"CODE": "BAD_REQUEST", "MESSAGE": "Bad request"}
    UNAUTHORIZED = {"CODE": "UNAUTHORIZED", "MESSAGE": "Unauthorized access"}
    FORBIDDEN = {"CODE": "FORBIDDEN", "MESSAGE": "Access forbidden"}
    INTERNAL_SERVER_ERROR = {"CODE": "INTERNAL_SERVER_ERROR", "MESSAGE": "Internal server error"}

RESPONSE_CODES = ResponseCodes()








import json
import logging
import boto3
from controller.dynamoDBservice import DynamoDBService

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def lambda_handler(event, context):
    try:
        # Initialize DynamoDB service
        service = DynamoDBService.get_instance(region=boto3.Session().region_name)

        # Validate event parameters
        action = event.get('action')
        params = event.get('params', {})
        if not action:
            raise ValueError("Missing 'action' parameter in event")

        # Log the action being performed
        logger.info(f"Processing action: {action}")

        # Handle different DynamoDB actions
        if action == 'get':
            params['TableName'] = 'fcms-screens-dm'
            params['Key'] = {'screenId': {'S': 'b7-9c-3d-8a-c1-86'}}
            result = service.get(params)
            return {
                'statusCode': 200,
                'body': json.dumps(result)
            }

        elif action == 'update':
            params['TableName'] = 'fcms-screens-dm'
            params['Key'] = {'screenId': {'S': 'b7-9c-3d-8a-c1-86'}}
            params['UpdateExpression'] = 'SET playingInformation = :pi'
            params['ExpressionAttributeValues'] = {':pi': {'M': {'status': {'S': 'active'}}}}
            result = service.update(params)
            return {
                'statusCode': 200,
                'body': json.dumps(result)
            }

        elif action == 'put':
            params['TableName'] = 'fcms-screens-dm'
            params['Item'] = {
                'screenId': {'S': 'b5-9f-3z-8a-c3-87'},
                'playingInformation': {'M': {'status': {'S': 'active'}}}
            }
            result = service.put(params)
            return {
                'statusCode': 200,
                'body': json.dumps(result)
            }

        elif action == 'batch_get':
            params['RequestItems'] = {
                'fcms-screens-dm': {
                    'Keys': [
                        {'screenId': {'S': 'b7-9c-3d-8a-c1-86'}}
                    ]
                }
            }
            result = service.batch_get(params)
            return {
                'statusCode': 200,
                'body': json.dumps(result)
            }

        elif action == 'query':
            params = {
                'TableName': 'fcms-screens-dm',
                'KeyConditionExpression': 'screenId = :v1',
                'ExpressionAttributeValues': {':v1': {'S': 'b7-9c-3d-8a-c1-86'}},
                'ProjectionExpression': 'screenId, playingInformation'
            }
            result = service.query(params)
            return {
                'statusCode': 200,
                'body': json.dumps(result)
            }

        elif action == 'batch_write':
            params = {
                'RequestItems': {
                    'fcms-screens-dm': [
                        {
                            'PutRequest': {
                                'Item': {
                                    'screenId': {'S': 'example1'},
                                    'data': {'S': 'value1'}
                                }
                            }
                        },
                        {
                            'DeleteRequest': {
                                'Key': {'screenId': {'S': 'example2'}}
                            }
                        }
                    ]
                }
            }
            result = service.batch_write(params)
            return {
                'statusCode': 200,
                'body': json.dumps(result)
            }

        elif action == 'scan':
            params = {
                'TableName': 'fcms-screens-dm',
                'FilterExpression': 'playingInformation.status = :active',
                'ExpressionAttributeValues': {':active': {'S': 'active'}}
            }
            result = service.scan(params)
            return {
                'statusCode': 200,
                'body': json.dumps(result)
            }

        elif action == 'transact_write':
            params = {
                'TransactItems': [
                    {
                        'Put': {
                            'TableName': 'fcms-screens-dm',
                            'Item': {
                                'screenId': {'S': 'example3'},
                                'data': {'S': 'value3'}
                            }
                        }
                    },
                    {
                        'Delete': {
                            'TableName': 'fcms-screens-dm',
                            'Key': {'screenId': {'S': 'example4'}}
                        }
                    }
                ]
            }
            result = service.transact_write_items(params)
            return {
                'statusCode': 200,
                'body': json.dumps(result)
            }

        elif action == 'delete':
            params['TableName'] = 'fcms-screens-dm'
            params['Key'] = {'screenId': {'S': 'b7-9c-3d-8a-c1-86'}}
            result = service.delete(params)
            return {
                'statusCode': 200,
                'body': json.dumps(result)
            }

        else:
            raise ValueError(f"Unsupported action: {action}")

    except Exception as e:
        logger.error(f"Error processing action {action}: {str(e)}")
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }









[Chirag Goel] 04-29-2025 11:45
{
  "statusCode": 200,
  "body": {
    "Item": {
      "playingInformation": {
        "M": {}
      },
      "screenId": {
        "S": "b7-9c-3d-8a-c1-86"
      },
      "enrollment": {
        "M": {
          "errorCode": {
            "N": "500"
          },
          "log": {
            "L": [
              {
                "M": {
                  "message": {
                    "S": "Success to get screen Serial Number"
                  },
                  "createdTime": {
                    "N": "1705409257031"
                  }
                }
              },
              {
                "M": {
                  "message": {
                    "S": "Fail to get TBM Server Auth."
                  },
                  "createdTime": {
                    "N": "1705409258075"
                  }
                }
              },
              {
                "M": {
                  "message": {
                    "S": "Success to get screen Serial Number"
                  },
                  "createdTime": {
                    "N": "1705409432530"
                  }
                }
              },
              {
                "M": {
                  "message": {
                    "S": "Fail to get TBM Server Auth."
                  },
                  "createdTime": {
                    "N": "1705409433611"
                  }
                }
              },
              {
                "M": {
                  "message": {
                    "S": "Success to get screen Serial Number"
                  },
                  "createdTime": {
                    "N": "1705409564208"
                  }
                }
              },
              {
                "M": {
                  "message": {
                    "S": "Fail to get TBM Server Auth."
                  },
                  "createdTime": {
                    "N": "1705409565252"
                  }
                }
              },
              {
                "M": {
                  "message": {
                    "S": "Success to get screen Serial Number"
                  },
                  "createdTime": {
                    "N": "1705410840215"
                  }
                }
              },
              {
                "M": {
